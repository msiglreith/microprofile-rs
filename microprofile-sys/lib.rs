#![allow(bad_style)]

#[cfg(feature = "vulkan")]
extern crate vk_sys as vk;

extern crate libc;
use libc::*;

pub type MicroProfileToken = u64;
pub type MicroProfileGroupId = u64;

#[repr(C)]
pub struct MicroProfileTokenType(u64);
pub const MicroProfileTokenTypeCpu: u64 = 0;
pub const MicroProfileTokenTypeGpu: u64 = 1;

#[repr(C)]
pub struct MicroProfileCounterFormat(u32);
pub const MICROPROFILE_COUNTER_FORMAT_DEFAULT: u32 = 0;
pub const MICROPROFILE_COUNTER_FORMAT_BYTES: u32 = 1;

#[repr(C)]
pub struct MicroProfileCounterFlags(u32);
pub const MICROPROFILE_COUNTER_FLAG_NONE: u32 = 0;
pub const MICROPROFILE_COUNTER_FLAG_DETAILED: u32 = 0x1;
pub const MICROPROFILE_COUNTER_FLAG_DETAILED_GRAPH: u32 = 0x2;
pub const MICROPROFILE_COUNTER_FLAG_INTERNAL_MASK: u32 = !0x3;
pub const MICROPROFILE_COUNTER_FLAG_HAS_LIMIT: u32 = 0x4;
pub const MICROPROFILE_COUNTER_FLAG_CLOSED: u32 = 0x8;
pub const MICROPROFILE_COUNTER_FLAG_MANUAL_SWAP: u32 = 0x10;
pub const MICROPROFILE_COUNTER_FLAG_LEAF: u32 = 0x20;

pub enum MicroProfile {}
pub enum MicroProfileThreadLogGpu {}
pub enum MicroProfileScopeStateC {}

extern {
	pub fn MicroProfileInit();
	pub fn MicroProfileShutdown();
	pub fn MicroProfileFindToken(group: *const c_char, name: *const c_char) -> MicroProfileToken;
	pub fn MicroProfileGetToken(group: *const c_char, name: *const c_char, color: u32, token: MicroProfileToken) -> MicroProfileToken;
	pub fn MicroProfileGetTokenC(token_out: *mut MicroProfileToken, group: *const c_char, name: *const c_char, color: u32, token: MicroProfileToken);
	pub fn MicroProfileGetMetaToken(name: *const c_char) -> MicroProfileToken;
	pub fn MicroProfileGetCounterToken(name: *const c_char) -> MicroProfileToken;
	pub fn MicroProfileMetaUpdate(token: MicroProfileToken, count: c_int, token_type: MicroProfileTokenType);
	pub fn MicroProfileCounterAdd(token: MicroProfileToken, count: i64);
	pub fn MicroProfileCounterSet(token: MicroProfileToken, count: i64);
	pub fn MicroProfileCounterSetLimit(token: MicroProfileToken, count: i64);
	pub fn MicroProfileCounterConfig(counter_name: *const c_char, format: u32, limit: i64, flags: u32);
	pub fn MicroProfileCounterSetPtr(counter_name: *const c_char, value: *mut c_void, size: u32);
	pub fn MicroProfileCounterFetchCounters();
	pub fn MicroProfileLocalCounterAdd(counter: *mut i64, count: i64);
	pub fn MicroProfileLocalCounterSet(counter: *mut i64, count: i64) -> i64;
	pub fn MicroProfileEnterInternal(token: MicroProfileToken) -> u64;
	pub fn MicroProfileLeaveInternal(token: MicroProfileToken, tick: u64);
	pub fn MicroProfileEnter(token: MicroProfileToken);
	pub fn MicroProfileLeave();
	pub fn MicroProfileEnterGpu(token: MicroProfileToken, log: *mut MicroProfileThreadLogGpu);
	pub fn MicroProfileLeaveGpu();
	pub fn MicroProfileGpuEnterInternal(log: *mut MicroProfileThreadLogGpu, token: MicroProfileToken) -> u64;
	pub fn MicroProfileGpuLeaveInternal(log: *mut MicroProfileThreadLogGpu, token: MicroProfileToken, tick: u64);
	pub fn MicroProfileGpuBegin(context: *mut c_void, log: *mut MicroProfileThreadLogGpu);
	pub fn MicroProfileGpuSetContext(context: *mut c_void, log: *mut MicroProfileThreadLogGpu);
	pub fn MicroProfileGpuEnd(log: *mut MicroProfileThreadLogGpu) -> u64;
	pub fn MicroProfileThreadLogGpuAlloc() -> *mut MicroProfileThreadLogGpu;
	pub fn MicroProfileThreadLogGpuFree(log: *mut MicroProfileThreadLogGpu);
	pub fn MicroProfileThreadLogGpuReset(log: *mut MicroProfileThreadLogGpu);
	pub fn MicroProfileGpuSubmit(queue: c_int, work: u64);
	pub fn MicroProfileInitGpuQueue(queue_name: *const c_char) -> c_int;
	pub fn MicroProfileGetGpuQueue(queue_name: *const c_char) -> c_int;
	pub fn MicroProfileFlip(gpu_context: *mut c_void);
	pub fn MicroProfileToggleFrozen();
	pub fn MicroProfileIsFrozen() -> c_int;
	pub fn MicroProfileEnabled() -> c_int;
	pub fn MicroProfileForceEnableGroup(group: *const c_char, ty: MicroProfileTokenType);
	pub fn MicroProfileForceDisableGroup(group: *const c_char, ty: MicroProfileTokenType);
	pub fn MicroProfileGetTime(group: *const c_char, ty: MicroProfileTokenType) -> c_float;
	pub fn MicroProfilePlatformMarkersGetEnabled() -> c_int;
	pub fn MicroProfilePlatformMarkersSetEnabled(enabled: c_int);
	pub fn MicroProfileContextSwitchSearch(context_switch_Start: *mut u32, context_switch_end: *mut u32, base_ticks_cpu: u64, base_ticks_end_cpu: u64);
	pub fn MicroProfileOnThreadCreate(thread_name: *const c_char);
	pub fn MicroProfileOnThreadExit();
	pub fn MicroProfileInitThreadLog();
	pub fn MicroProfileSetEnableAllGroups(enable: c_int);
	pub fn MicroProfileEnableCategory(category: *const c_char);
	pub fn MicroProfileDisableCategory(category: *const c_char);
	pub fn MicroProfileGetEnableAllGroups() -> c_int;
	pub fn MicroProfileSetForceMetaCounters(enable: c_int);
	pub fn MicroProfileGetForceMetaCounters() -> c_int;
	pub fn MicroProfileEnableMetaCounter(meta: *const c_char);
	pub fn MicroProfileDisableMetaCounter(meta: *const c_char);
	pub fn MicroProfileSetAggregateFrames(frames: c_int);
	pub fn MicroProfileGetAggregateFrames() -> c_int;
	pub fn MicroProfileGetCurrentAggregateFrames() -> c_int;
	pub fn MicroProfileGet() -> *mut MicroProfile;
	pub fn MicroProfileGetRange(put: u32, get: u32, range: *mut u32);
	pub fn MicroProfileStartContextSwitchTrace();
	pub fn MicroProfileStopContextSwitchTrace();
	pub fn MicroProfileIsLocalThread(thread_id: u32) -> c_int;
	pub fn MicroProfileFormatCounter(format: c_int, counter: i64, out: *mut c_char, buffer_size: u32) -> c_int;
	pub fn MicroProfileGetGlobalGpuThreadLog() -> *mut MicroProfileThreadLogGpu;
	pub fn MicroProfileGetGlobalGpuQueue() -> c_int;
	pub fn MicroProfileRegisterGroup(group: *const c_char, category: *const c_char, color: u32);

	pub fn MicroProfileDumpFile(html: *const c_char, csv: *const c_char, cpu_spike: c_float, gpu_spike: c_float);
	pub fn MicroProfileDumpFileImmediately(html: *const c_char, csv: *const c_char, gpu_context: *mut c_void);
	pub fn MicroProfileWebServerPort() -> u32;

	/*
#if MICROPROFILE_PLATFORM_MARKERS
	void MicroProfilePlatformMarkerBegin(uint32_t nColor, const char * pMarker); //not implemented by microprofile.
	void MicroProfilePlatformMarkerEnd();//not implemented by microprofile.
#endif

	float MicroProfileTickToMsMultiplierCpu();
	float MicroProfileTickToMsMultiplierGpu();
	int64_t MicroProfileTicksPerSecondCpu();
	uint64_t MicroProfileTick();
*/

	#[cfg(feature = "gl")]
	pub fn MicroProfileGpuInitGL(gl_loader: extern fn (*const c_char, *mut c_void) -> *mut c_void, user: *mut c_void);

	#[cfg(feature = "dx11")]
	pub fn MicroProfileGpuInitD3D11(device: *mut c_void, device_context: *mut c_void);

	#[cfg(feature = "dx12")]
	pub fn MicroProfileGpuInitD3D12(device: *mut c_void, node_count: u32, command_queues: *mut *mut c_void);
	#[cfg(feature = "dx12")]
	pub fn MicroProfileSetCurrentNodeD3D12(node: u32);

	#[cfg(feature = "vulkan")]
	pub fn MicroProfileGpuInitVulkan(devices: *mut vk::Device, physical_devices: *mut vk::PhysicalDevice, queues: *mut vk::Queue, queue_family: u32, node_count: u32);
	#[cfg(feature = "vulkan")]
	pub fn MicroProfileSetCurrentNodeVulkan(node: u32);

	pub fn MicroProfileGpuShutdown();
	pub fn MicroProfileGpuInsertTimeStamp(context: *mut c_void) -> u32;
	pub fn MicroProfileGpuGetTimeStamp(key: u32) -> u64;
	pub fn MicroProfileTicksPerSecondGpu() -> u64;
	pub fn MicroProfileGetGpuTickReference(out_cpu: *mut i64, out_gpu: *mut i64) -> c_int;
	pub fn MicroProfileGpuFlip(context: *mut c_void) -> u32;
}

pub const MICROPROFILE_GL_MAX_QUERIES: c_int = 8<<10;
pub const MICROPROFILE_D3D_MAX_QUERIES: c_int = 8<<10;

pub const MP_SNOW: c_int = 0xfffafa;
pub const MP_GHOSTWHITE: c_int = 0xf8f8ff;
pub const MP_WHITESMOKE: c_int = 0xf5f5f5;
pub const MP_GAINSBORO: c_int = 0xdcdcdc;
pub const MP_FLORALWHITE: c_int = 0xfffaf0;
pub const MP_OLDLACE: c_int = 0xfdf5e6;
pub const MP_LINEN: c_int = 0xfaf0e6;
pub const MP_ANTIQUEWHITE: c_int = 0xfaebd7;
pub const MP_PAPAYAWHIP: c_int = 0xffefd5;
pub const MP_BLANCHEDALMOND: c_int = 0xffebcd;
pub const MP_BISQUE: c_int = 0xffe4c4;
pub const MP_PEACHPUFF: c_int = 0xffdab9;
pub const MP_NAVAJOWHITE: c_int = 0xffdead;
pub const MP_MOCCASIN: c_int = 0xffe4b5;
pub const MP_CORNSILK: c_int = 0xfff8dc;
pub const MP_IVORY: c_int = 0xfffff0;
pub const MP_LEMONCHIFFON: c_int = 0xfffacd;
pub const MP_SEASHELL: c_int = 0xfff5ee;
pub const MP_HONEYDEW: c_int = 0xf0fff0;
pub const MP_MINTCREAM: c_int = 0xf5fffa;
pub const MP_AZURE: c_int = 0xf0ffff;
pub const MP_ALICEBLUE: c_int = 0xf0f8ff;
pub const MP_LAVENDER: c_int = 0xe6e6fa;
pub const MP_LAVENDERBLUSH: c_int = 0xfff0f5;
pub const MP_MISTYROSE: c_int = 0xffe4e1;
pub const MP_WHITE: c_int = 0xffffff;
pub const MP_BLACK: c_int = 0x000000;
pub const MP_DARKSLATEGRAY: c_int = 0x2f4f4f;
pub const MP_DARKSLATEGREY: c_int = 0x2f4f4f;
pub const MP_DIMGRAY: c_int = 0x696969;
pub const MP_DIMGREY: c_int = 0x696969;
pub const MP_SLATEGRAY: c_int = 0x708090;
pub const MP_SLATEGREY: c_int = 0x708090;
pub const MP_LIGHTSLATEGRAY: c_int = 0x778899;
pub const MP_LIGHTSLATEGREY: c_int = 0x778899;
pub const MP_GRAY: c_int = 0xbebebe;
pub const MP_GREY: c_int = 0xbebebe;
pub const MP_LIGHTGREY: c_int = 0xd3d3d3;
pub const MP_LIGHTGRAY: c_int = 0xd3d3d3;
pub const MP_MIDNIGHTBLUE: c_int = 0x191970;
pub const MP_NAVY: c_int = 0x000080;
pub const MP_NAVYBLUE: c_int = 0x000080;
pub const MP_CORNFLOWERBLUE: c_int = 0x6495ed;
pub const MP_DARKSLATEBLUE: c_int = 0x483d8b;
pub const MP_SLATEBLUE: c_int = 0x6a5acd;
pub const MP_MEDIUMSLATEBLUE: c_int = 0x7b68ee;
pub const MP_LIGHTSLATEBLUE: c_int = 0x8470ff;
pub const MP_MEDIUMBLUE: c_int = 0x0000cd;
pub const MP_ROYALBLUE: c_int = 0x4169e1;
pub const MP_BLUE: c_int = 0x0000ff;
pub const MP_DODGERBLUE: c_int = 0x1e90ff;
pub const MP_DEEPSKYBLUE: c_int = 0x00bfff;
pub const MP_SKYBLUE: c_int = 0x87ceeb;
pub const MP_LIGHTSKYBLUE: c_int = 0x87cefa;
pub const MP_STEELBLUE: c_int = 0x4682b4;
pub const MP_LIGHTSTEELBLUE: c_int = 0xb0c4de;
pub const MP_LIGHTBLUE: c_int = 0xadd8e6;
pub const MP_POWDERBLUE: c_int = 0xb0e0e6;
pub const MP_PALETURQUOISE: c_int = 0xafeeee;
pub const MP_DARKTURQUOISE: c_int = 0x00ced1;
pub const MP_MEDIUMTURQUOISE: c_int = 0x48d1cc;
pub const MP_TURQUOISE: c_int = 0x40e0d0;
pub const MP_CYAN: c_int = 0x00ffff;
pub const MP_LIGHTCYAN: c_int = 0xe0ffff;
pub const MP_CADETBLUE: c_int = 0x5f9ea0;
pub const MP_MEDIUMAQUAMARINE: c_int = 0x66cdaa;
pub const MP_AQUAMARINE: c_int = 0x7fffd4;
pub const MP_DARKGREEN: c_int = 0x006400;
pub const MP_DARKOLIVEGREEN: c_int = 0x556b2f;
pub const MP_DARKSEAGREEN: c_int = 0x8fbc8f;
pub const MP_SEAGREEN: c_int = 0x2e8b57;
pub const MP_MEDIUMSEAGREEN: c_int = 0x3cb371;
pub const MP_LIGHTSEAGREEN: c_int = 0x20b2aa;
pub const MP_PALEGREEN: c_int = 0x98fb98;
pub const MP_SPRINGGREEN: c_int = 0x00ff7f;
pub const MP_LAWNGREEN: c_int = 0x7cfc00;
pub const MP_GREEN: c_int = 0x00ff00;
pub const MP_CHARTREUSE: c_int = 0x7fff00;
pub const MP_MEDIUMSPRINGGREEN: c_int = 0x00fa9a;
pub const MP_GREENYELLOW: c_int = 0xadff2f;
pub const MP_LIMEGREEN: c_int = 0x32cd32;
pub const MP_YELLOWGREEN: c_int = 0x9acd32;
pub const MP_FORESTGREEN: c_int = 0x228b22;
pub const MP_OLIVEDRAB: c_int = 0x6b8e23;
pub const MP_DARKKHAKI: c_int = 0xbdb76b;
pub const MP_KHAKI: c_int = 0xf0e68c;
pub const MP_PALEGOLDENROD: c_int = 0xeee8aa;
pub const MP_LIGHTGOLDENRODYELLOW: c_int = 0xfafad2;
pub const MP_LIGHTYELLOW: c_int = 0xffffe0;
pub const MP_YELLOW: c_int = 0xffff00;
pub const MP_GOLD: c_int = 0xffd700;
pub const MP_LIGHTGOLDENROD: c_int = 0xeedd82;
pub const MP_GOLDENROD: c_int = 0xdaa520;
pub const MP_DARKGOLDENROD: c_int = 0xb8860b;
pub const MP_ROSYBROWN: c_int = 0xbc8f8f;
pub const MP_INDIANRED: c_int = 0xcd5c5c;
pub const MP_SADDLEBROWN: c_int = 0x8b4513;
pub const MP_SIENNA: c_int = 0xa0522d;
pub const MP_PERU: c_int = 0xcd853f;
pub const MP_BURLYWOOD: c_int = 0xdeb887;
pub const MP_BEIGE: c_int = 0xf5f5dc;
pub const MP_WHEAT: c_int = 0xf5deb3;
pub const MP_SANDYBROWN: c_int = 0xf4a460;
pub const MP_TAN: c_int = 0xd2b48c;
pub const MP_CHOCOLATE: c_int = 0xd2691e;
pub const MP_FIREBRICK: c_int = 0xb22222;
pub const MP_BROWN: c_int = 0xa52a2a;
pub const MP_DARKSALMON: c_int = 0xe9967a;
pub const MP_SALMON: c_int = 0xfa8072;
pub const MP_LIGHTSALMON: c_int = 0xffa07a;
pub const MP_ORANGE: c_int = 0xffa500;
pub const MP_DARKORANGE: c_int = 0xff8c00;
pub const MP_CORAL: c_int = 0xff7f50;
pub const MP_LIGHTCORAL: c_int = 0xf08080;
pub const MP_TOMATO: c_int = 0xff6347;
pub const MP_ORANGERED: c_int = 0xff4500;
pub const MP_RED: c_int = 0xff0000;
pub const MP_HOTPINK: c_int = 0xff69b4;
pub const MP_DEEPPINK: c_int = 0xff1493;
pub const MP_PINK: c_int = 0xffc0cb;
pub const MP_LIGHTPINK: c_int = 0xffb6c1;
pub const MP_PALEVIOLETRED: c_int = 0xdb7093;
pub const MP_MAROON: c_int = 0xb03060;
pub const MP_MEDIUMVIOLETRED: c_int = 0xc71585;
pub const MP_VIOLETRED: c_int = 0xd02090;
pub const MP_MAGENTA: c_int = 0xff00ff;
pub const MP_VIOLET: c_int = 0xee82ee;
pub const MP_PLUM: c_int = 0xdda0dd;
pub const MP_ORCHID: c_int = 0xda70d6;
pub const MP_MEDIUMORCHID: c_int = 0xba55d3;
pub const MP_DARKORCHID: c_int = 0x9932cc;
pub const MP_DARKVIOLET: c_int = 0x9400d3;
pub const MP_BLUEVIOLET: c_int = 0x8a2be2;
pub const MP_PURPLE: c_int = 0xa020f0;
pub const MP_MEDIUMPURPLE: c_int = 0x9370db;
pub const MP_THISTLE: c_int = 0xd8bfd8;
pub const MP_SNOW1: c_int = 0xfffafa;
pub const MP_SNOW2: c_int = 0xeee9e9;
pub const MP_SNOW3: c_int = 0xcdc9c9;
pub const MP_SNOW4: c_int = 0x8b8989;
pub const MP_SEASHELL1: c_int = 0xfff5ee;
pub const MP_SEASHELL2: c_int = 0xeee5de;
pub const MP_SEASHELL3: c_int = 0xcdc5bf;
pub const MP_SEASHELL4: c_int = 0x8b8682;
pub const MP_ANTIQUEWHITE1: c_int = 0xffefdb;
pub const MP_ANTIQUEWHITE2: c_int = 0xeedfcc;
pub const MP_ANTIQUEWHITE3: c_int = 0xcdc0b0;
pub const MP_ANTIQUEWHITE4: c_int = 0x8b8378;
pub const MP_BISQUE1: c_int = 0xffe4c4;
pub const MP_BISQUE2: c_int = 0xeed5b7;
pub const MP_BISQUE3: c_int = 0xcdb79e;
pub const MP_BISQUE4: c_int = 0x8b7d6b;
pub const MP_PEACHPUFF1: c_int = 0xffdab9;
pub const MP_PEACHPUFF2: c_int = 0xeecbad;
pub const MP_PEACHPUFF3: c_int = 0xcdaf95;
pub const MP_PEACHPUFF4: c_int = 0x8b7765;
pub const MP_NAVAJOWHITE1: c_int = 0xffdead;
pub const MP_NAVAJOWHITE2: c_int = 0xeecfa1;
pub const MP_NAVAJOWHITE3: c_int = 0xcdb38b;
pub const MP_NAVAJOWHITE4: c_int = 0x8b795e;
pub const MP_LEMONCHIFFON1: c_int = 0xfffacd;
pub const MP_LEMONCHIFFON2: c_int = 0xeee9bf;
pub const MP_LEMONCHIFFON3: c_int = 0xcdc9a5;
pub const MP_LEMONCHIFFON4: c_int = 0x8b8970;
pub const MP_CORNSILK1: c_int = 0xfff8dc;
pub const MP_CORNSILK2: c_int = 0xeee8cd;
pub const MP_CORNSILK3: c_int = 0xcdc8b1;
pub const MP_CORNSILK4: c_int = 0x8b8878;
pub const MP_IVORY1: c_int = 0xfffff0;
pub const MP_IVORY2: c_int = 0xeeeee0;
pub const MP_IVORY3: c_int = 0xcdcdc1;
pub const MP_IVORY4: c_int = 0x8b8b83;
pub const MP_HONEYDEW1: c_int = 0xf0fff0;
pub const MP_HONEYDEW2: c_int = 0xe0eee0;
pub const MP_HONEYDEW3: c_int = 0xc1cdc1;
pub const MP_HONEYDEW4: c_int = 0x838b83;
pub const MP_LAVENDERBLUSH1: c_int = 0xfff0f5;
pub const MP_LAVENDERBLUSH2: c_int = 0xeee0e5;
pub const MP_LAVENDERBLUSH3: c_int = 0xcdc1c5;
pub const MP_LAVENDERBLUSH4: c_int = 0x8b8386;
pub const MP_MISTYROSE1: c_int = 0xffe4e1;
pub const MP_MISTYROSE2: c_int = 0xeed5d2;
pub const MP_MISTYROSE3: c_int = 0xcdb7b5;
pub const MP_MISTYROSE4: c_int = 0x8b7d7b;
pub const MP_AZURE1: c_int = 0xf0ffff;
pub const MP_AZURE2: c_int = 0xe0eeee;
pub const MP_AZURE3: c_int = 0xc1cdcd;
pub const MP_AZURE4: c_int = 0x838b8b;
pub const MP_SLATEBLUE1: c_int = 0x836fff;
pub const MP_SLATEBLUE2: c_int = 0x7a67ee;
pub const MP_SLATEBLUE3: c_int = 0x6959cd;
pub const MP_SLATEBLUE4: c_int = 0x473c8b;
pub const MP_ROYALBLUE1: c_int = 0x4876ff;
pub const MP_ROYALBLUE2: c_int = 0x436eee;
pub const MP_ROYALBLUE3: c_int = 0x3a5fcd;
pub const MP_ROYALBLUE4: c_int = 0x27408b;
pub const MP_BLUE1: c_int = 0x0000ff;
pub const MP_BLUE2: c_int = 0x0000ee;
pub const MP_BLUE3: c_int = 0x0000cd;
pub const MP_BLUE4: c_int = 0x00008b;
pub const MP_DODGERBLUE1: c_int = 0x1e90ff;
pub const MP_DODGERBLUE2: c_int = 0x1c86ee;
pub const MP_DODGERBLUE3: c_int = 0x1874cd;
pub const MP_DODGERBLUE4: c_int = 0x104e8b;
pub const MP_STEELBLUE1: c_int = 0x63b8ff;
pub const MP_STEELBLUE2: c_int = 0x5cacee;
pub const MP_STEELBLUE3: c_int = 0x4f94cd;
pub const MP_STEELBLUE4: c_int = 0x36648b;
pub const MP_DEEPSKYBLUE1: c_int = 0x00bfff;
pub const MP_DEEPSKYBLUE2: c_int = 0x00b2ee;
pub const MP_DEEPSKYBLUE3: c_int = 0x009acd;
pub const MP_DEEPSKYBLUE4: c_int = 0x00688b;
pub const MP_SKYBLUE1: c_int = 0x87ceff;
pub const MP_SKYBLUE2: c_int = 0x7ec0ee;
pub const MP_SKYBLUE3: c_int = 0x6ca6cd;
pub const MP_SKYBLUE4: c_int = 0x4a708b;
pub const MP_LIGHTSKYBLUE1: c_int = 0xb0e2ff;
pub const MP_LIGHTSKYBLUE2: c_int = 0xa4d3ee;
pub const MP_LIGHTSKYBLUE3: c_int = 0x8db6cd;
pub const MP_LIGHTSKYBLUE4: c_int = 0x607b8b;
pub const MP_SLATEGRAY1: c_int = 0xc6e2ff;
pub const MP_SLATEGRAY2: c_int = 0xb9d3ee;
pub const MP_SLATEGRAY3: c_int = 0x9fb6cd;
pub const MP_SLATEGRAY4: c_int = 0x6c7b8b;
pub const MP_LIGHTSTEELBLUE1: c_int = 0xcae1ff;
pub const MP_LIGHTSTEELBLUE2: c_int = 0xbcd2ee;
pub const MP_LIGHTSTEELBLUE3: c_int = 0xa2b5cd;
pub const MP_LIGHTSTEELBLUE4: c_int = 0x6e7b8b;
pub const MP_LIGHTBLUE1: c_int = 0xbfefff;
pub const MP_LIGHTBLUE2: c_int = 0xb2dfee;
pub const MP_LIGHTBLUE3: c_int = 0x9ac0cd;
pub const MP_LIGHTBLUE4: c_int = 0x68838b;
pub const MP_LIGHTCYAN1: c_int = 0xe0ffff;
pub const MP_LIGHTCYAN2: c_int = 0xd1eeee;
pub const MP_LIGHTCYAN3: c_int = 0xb4cdcd;
pub const MP_LIGHTCYAN4: c_int = 0x7a8b8b;
pub const MP_PALETURQUOISE1: c_int = 0xbbffff;
pub const MP_PALETURQUOISE2: c_int = 0xaeeeee;
pub const MP_PALETURQUOISE3: c_int = 0x96cdcd;
pub const MP_PALETURQUOISE4: c_int = 0x668b8b;
pub const MP_CADETBLUE1: c_int = 0x98f5ff;
pub const MP_CADETBLUE2: c_int = 0x8ee5ee;
pub const MP_CADETBLUE3: c_int = 0x7ac5cd;
pub const MP_CADETBLUE4: c_int = 0x53868b;
pub const MP_TURQUOISE1: c_int = 0x00f5ff;
pub const MP_TURQUOISE2: c_int = 0x00e5ee;
pub const MP_TURQUOISE3: c_int = 0x00c5cd;
pub const MP_TURQUOISE4: c_int = 0x00868b;
pub const MP_CYAN1: c_int = 0x00ffff;
pub const MP_CYAN2: c_int = 0x00eeee;
pub const MP_CYAN3: c_int = 0x00cdcd;
pub const MP_CYAN4: c_int = 0x008b8b;
pub const MP_DARKSLATEGRAY1: c_int = 0x97ffff;
pub const MP_DARKSLATEGRAY2: c_int = 0x8deeee;
pub const MP_DARKSLATEGRAY3: c_int = 0x79cdcd;
pub const MP_DARKSLATEGRAY4: c_int = 0x528b8b;
pub const MP_AQUAMARINE1: c_int = 0x7fffd4;
pub const MP_AQUAMARINE2: c_int = 0x76eec6;
pub const MP_AQUAMARINE3: c_int = 0x66cdaa;
pub const MP_AQUAMARINE4: c_int = 0x458b74;
pub const MP_DARKSEAGREEN1: c_int = 0xc1ffc1;
pub const MP_DARKSEAGREEN2: c_int = 0xb4eeb4;
pub const MP_DARKSEAGREEN3: c_int = 0x9bcd9b;
pub const MP_DARKSEAGREEN4: c_int = 0x698b69;
pub const MP_SEAGREEN1: c_int = 0x54ff9f;
pub const MP_SEAGREEN2: c_int = 0x4eee94;
pub const MP_SEAGREEN3: c_int = 0x43cd80;
pub const MP_SEAGREEN4: c_int = 0x2e8b57;
pub const MP_PALEGREEN1: c_int = 0x9aff9a;
pub const MP_PALEGREEN2: c_int = 0x90ee90;
pub const MP_PALEGREEN3: c_int = 0x7ccd7c;
pub const MP_PALEGREEN4: c_int = 0x548b54;
pub const MP_SPRINGGREEN1: c_int = 0x00ff7f;
pub const MP_SPRINGGREEN2: c_int = 0x00ee76;
pub const MP_SPRINGGREEN3: c_int = 0x00cd66;
pub const MP_SPRINGGREEN4: c_int = 0x008b45;
pub const MP_GREEN1: c_int = 0x00ff00;
pub const MP_GREEN2: c_int = 0x00ee00;
pub const MP_GREEN3: c_int = 0x00cd00;
pub const MP_GREEN4: c_int = 0x008b00;
pub const MP_CHARTREUSE1: c_int = 0x7fff00;
pub const MP_CHARTREUSE2: c_int = 0x76ee00;
pub const MP_CHARTREUSE3: c_int = 0x66cd00;
pub const MP_CHARTREUSE4: c_int = 0x458b00;
pub const MP_OLIVEDRAB1: c_int = 0xc0ff3e;
pub const MP_OLIVEDRAB2: c_int = 0xb3ee3a;
pub const MP_OLIVEDRAB3: c_int = 0x9acd32;
pub const MP_OLIVEDRAB4: c_int = 0x698b22;
pub const MP_DARKOLIVEGREEN1: c_int = 0xcaff70;
pub const MP_DARKOLIVEGREEN2: c_int = 0xbcee68;
pub const MP_DARKOLIVEGREEN3: c_int = 0xa2cd5a;
pub const MP_DARKOLIVEGREEN4: c_int = 0x6e8b3d;
pub const MP_KHAKI1: c_int = 0xfff68f;
pub const MP_KHAKI2: c_int = 0xeee685;
pub const MP_KHAKI3: c_int = 0xcdc673;
pub const MP_KHAKI4: c_int = 0x8b864e;
pub const MP_LIGHTGOLDENROD1: c_int = 0xffec8b;
pub const MP_LIGHTGOLDENROD2: c_int = 0xeedc82;
pub const MP_LIGHTGOLDENROD3: c_int = 0xcdbe70;
pub const MP_LIGHTGOLDENROD4: c_int = 0x8b814c;
pub const MP_LIGHTYELLOW1: c_int = 0xffffe0;
pub const MP_LIGHTYELLOW2: c_int = 0xeeeed1;
pub const MP_LIGHTYELLOW3: c_int = 0xcdcdb4;
pub const MP_LIGHTYELLOW4: c_int = 0x8b8b7a;
pub const MP_YELLOW1: c_int = 0xffff00;
pub const MP_YELLOW2: c_int = 0xeeee00;
pub const MP_YELLOW3: c_int = 0xcdcd00;
pub const MP_YELLOW4: c_int = 0x8b8b00;
pub const MP_GOLD1: c_int = 0xffd700;
pub const MP_GOLD2: c_int = 0xeec900;
pub const MP_GOLD3: c_int = 0xcdad00;
pub const MP_GOLD4: c_int = 0x8b7500;
pub const MP_GOLDENROD1: c_int = 0xffc125;
pub const MP_GOLDENROD2: c_int = 0xeeb422;
pub const MP_GOLDENROD3: c_int = 0xcd9b1d;
pub const MP_GOLDENROD4: c_int = 0x8b6914;
pub const MP_DARKGOLDENROD1: c_int = 0xffb90f;
pub const MP_DARKGOLDENROD2: c_int = 0xeead0e;
pub const MP_DARKGOLDENROD3: c_int = 0xcd950c;
pub const MP_DARKGOLDENROD4: c_int = 0x8b6508;
pub const MP_ROSYBROWN1: c_int = 0xffc1c1;
pub const MP_ROSYBROWN2: c_int = 0xeeb4b4;
pub const MP_ROSYBROWN3: c_int = 0xcd9b9b;
pub const MP_ROSYBROWN4: c_int = 0x8b6969;
pub const MP_INDIANRED1: c_int = 0xff6a6a;
pub const MP_INDIANRED2: c_int = 0xee6363;
pub const MP_INDIANRED3: c_int = 0xcd5555;
pub const MP_INDIANRED4: c_int = 0x8b3a3a;
pub const MP_SIENNA1: c_int = 0xff8247;
pub const MP_SIENNA2: c_int = 0xee7942;
pub const MP_SIENNA3: c_int = 0xcd6839;
pub const MP_SIENNA4: c_int = 0x8b4726;
pub const MP_BURLYWOOD1: c_int = 0xffd39b;
pub const MP_BURLYWOOD2: c_int = 0xeec591;
pub const MP_BURLYWOOD3: c_int = 0xcdaa7d;
pub const MP_BURLYWOOD4: c_int = 0x8b7355;
pub const MP_WHEAT1: c_int = 0xffe7ba;
pub const MP_WHEAT2: c_int = 0xeed8ae;
pub const MP_WHEAT3: c_int = 0xcdba96;
pub const MP_WHEAT4: c_int = 0x8b7e66;
pub const MP_TAN1: c_int = 0xffa54f;
pub const MP_TAN2: c_int = 0xee9a49;
pub const MP_TAN3: c_int = 0xcd853f;
pub const MP_TAN4: c_int = 0x8b5a2b;
pub const MP_CHOCOLATE1: c_int = 0xff7f24;
pub const MP_CHOCOLATE2: c_int = 0xee7621;
pub const MP_CHOCOLATE3: c_int = 0xcd661d;
pub const MP_CHOCOLATE4: c_int = 0x8b4513;
pub const MP_FIREBRICK1: c_int = 0xff3030;
pub const MP_FIREBRICK2: c_int = 0xee2c2c;
pub const MP_FIREBRICK3: c_int = 0xcd2626;
pub const MP_FIREBRICK4: c_int = 0x8b1a1a;
pub const MP_BROWN1: c_int = 0xff4040;
pub const MP_BROWN2: c_int = 0xee3b3b;
pub const MP_BROWN3: c_int = 0xcd3333;
pub const MP_BROWN4: c_int = 0x8b2323;
pub const MP_SALMON1: c_int = 0xff8c69;
pub const MP_SALMON2: c_int = 0xee8262;
pub const MP_SALMON3: c_int = 0xcd7054;
pub const MP_SALMON4: c_int = 0x8b4c39;
pub const MP_LIGHTSALMON1: c_int = 0xffa07a;
pub const MP_LIGHTSALMON2: c_int = 0xee9572;
pub const MP_LIGHTSALMON3: c_int = 0xcd8162;
pub const MP_LIGHTSALMON4: c_int = 0x8b5742;
pub const MP_ORANGE1: c_int = 0xffa500;
pub const MP_ORANGE2: c_int = 0xee9a00;
pub const MP_ORANGE3: c_int = 0xcd8500;
pub const MP_ORANGE4: c_int = 0x8b5a00;
pub const MP_DARKORANGE1: c_int = 0xff7f00;
pub const MP_DARKORANGE2: c_int = 0xee7600;
pub const MP_DARKORANGE3: c_int = 0xcd6600;
pub const MP_DARKORANGE4: c_int = 0x8b4500;
pub const MP_CORAL1: c_int = 0xff7256;
pub const MP_CORAL2: c_int = 0xee6a50;
pub const MP_CORAL3: c_int = 0xcd5b45;
pub const MP_CORAL4: c_int = 0x8b3e2f;
pub const MP_TOMATO1: c_int = 0xff6347;
pub const MP_TOMATO2: c_int = 0xee5c42;
pub const MP_TOMATO3: c_int = 0xcd4f39;
pub const MP_TOMATO4: c_int = 0x8b3626;
pub const MP_ORANGERED1: c_int = 0xff4500;
pub const MP_ORANGERED2: c_int = 0xee4000;
pub const MP_ORANGERED3: c_int = 0xcd3700;
pub const MP_ORANGERED4: c_int = 0x8b2500;
pub const MP_RED1: c_int = 0xff0000;
pub const MP_RED2: c_int = 0xee0000;
pub const MP_RED3: c_int = 0xcd0000;
pub const MP_RED4: c_int = 0x8b0000;
pub const MP_DEEPPINK1: c_int = 0xff1493;
pub const MP_DEEPPINK2: c_int = 0xee1289;
pub const MP_DEEPPINK3: c_int = 0xcd1076;
pub const MP_DEEPPINK4: c_int = 0x8b0a50;
pub const MP_HOTPINK1: c_int = 0xff6eb4;
pub const MP_HOTPINK2: c_int = 0xee6aa7;
pub const MP_HOTPINK3: c_int = 0xcd6090;
pub const MP_HOTPINK4: c_int = 0x8b3a62;
pub const MP_PINK1: c_int = 0xffb5c5;
pub const MP_PINK2: c_int = 0xeea9b8;
pub const MP_PINK3: c_int = 0xcd919e;
pub const MP_PINK4: c_int = 0x8b636c;
pub const MP_LIGHTPINK1: c_int = 0xffaeb9;
pub const MP_LIGHTPINK2: c_int = 0xeea2ad;
pub const MP_LIGHTPINK3: c_int = 0xcd8c95;
pub const MP_LIGHTPINK4: c_int = 0x8b5f65;
pub const MP_PALEVIOLETRED1: c_int = 0xff82ab;
pub const MP_PALEVIOLETRED2: c_int = 0xee799f;
pub const MP_PALEVIOLETRED3: c_int = 0xcd6889;
pub const MP_PALEVIOLETRED4: c_int = 0x8b475d;
pub const MP_MAROON1: c_int = 0xff34b3;
pub const MP_MAROON2: c_int = 0xee30a7;
pub const MP_MAROON3: c_int = 0xcd2990;
pub const MP_MAROON4: c_int = 0x8b1c62;
pub const MP_VIOLETRED1: c_int = 0xff3e96;
pub const MP_VIOLETRED2: c_int = 0xee3a8c;
pub const MP_VIOLETRED3: c_int = 0xcd3278;
pub const MP_VIOLETRED4: c_int = 0x8b2252;
pub const MP_MAGENTA1: c_int = 0xff00ff;
pub const MP_MAGENTA2: c_int = 0xee00ee;
pub const MP_MAGENTA3: c_int = 0xcd00cd;
pub const MP_MAGENTA4: c_int = 0x8b008b;
pub const MP_ORCHID1: c_int = 0xff83fa;
pub const MP_ORCHID2: c_int = 0xee7ae9;
pub const MP_ORCHID3: c_int = 0xcd69c9;
pub const MP_ORCHID4: c_int = 0x8b4789;
pub const MP_PLUM1: c_int = 0xffbbff;
pub const MP_PLUM2: c_int = 0xeeaeee;
pub const MP_PLUM3: c_int = 0xcd96cd;
pub const MP_PLUM4: c_int = 0x8b668b;
pub const MP_MEDIUMORCHID1: c_int = 0xe066ff;
pub const MP_MEDIUMORCHID2: c_int = 0xd15fee;
pub const MP_MEDIUMORCHID3: c_int = 0xb452cd;
pub const MP_MEDIUMORCHID4: c_int = 0x7a378b;
pub const MP_DARKORCHID1: c_int = 0xbf3eff;
pub const MP_DARKORCHID2: c_int = 0xb23aee;
pub const MP_DARKORCHID3: c_int = 0x9a32cd;
pub const MP_DARKORCHID4: c_int = 0x68228b;
pub const MP_PURPLE1: c_int = 0x9b30ff;
pub const MP_PURPLE2: c_int = 0x912cee;
pub const MP_PURPLE3: c_int = 0x7d26cd;
pub const MP_PURPLE4: c_int = 0x551a8b;
pub const MP_MEDIUMPURPLE1: c_int = 0xab82ff;
pub const MP_MEDIUMPURPLE2: c_int = 0x9f79ee;
pub const MP_MEDIUMPURPLE3: c_int = 0x8968cd;
pub const MP_MEDIUMPURPLE4: c_int = 0x5d478b;
pub const MP_THISTLE1: c_int = 0xffe1ff;
pub const MP_THISTLE2: c_int = 0xeed2ee;
pub const MP_THISTLE3: c_int = 0xcdb5cd;
pub const MP_THISTLE4: c_int = 0x8b7b8b;
pub const MP_GRAY0: c_int = 0x000000;
pub const MP_GREY0: c_int = 0x000000;
pub const MP_GRAY1: c_int = 0x030303;
pub const MP_GREY1: c_int = 0x030303;
pub const MP_GRAY2: c_int = 0x050505;
pub const MP_GREY2: c_int = 0x050505;
pub const MP_GRAY3: c_int = 0x080808;
pub const MP_GREY3: c_int = 0x080808;
pub const MP_GRAY4: c_int = 0x0a0a0a;
pub const MP_GREY4: c_int = 0x0a0a0a;
pub const MP_GRAY5: c_int = 0x0d0d0d;
pub const MP_GREY5: c_int = 0x0d0d0d;
pub const MP_GRAY6: c_int = 0x0f0f0f;
pub const MP_GREY6: c_int = 0x0f0f0f;
pub const MP_GRAY7: c_int = 0x121212;
pub const MP_GREY7: c_int = 0x121212;
pub const MP_GRAY8: c_int = 0x141414;
pub const MP_GREY8: c_int = 0x141414;
pub const MP_GRAY9: c_int = 0x171717;
pub const MP_GREY9: c_int = 0x171717;
pub const MP_GRAY10: c_int = 0x1a1a1a;
pub const MP_GREY10: c_int = 0x1a1a1a;
pub const MP_GRAY11: c_int = 0x1c1c1c;
pub const MP_GREY11: c_int = 0x1c1c1c;
pub const MP_GRAY12: c_int = 0x1f1f1f;
pub const MP_GREY12: c_int = 0x1f1f1f;
pub const MP_GRAY13: c_int = 0x212121;
pub const MP_GREY13: c_int = 0x212121;
pub const MP_GRAY14: c_int = 0x242424;
pub const MP_GREY14: c_int = 0x242424;
pub const MP_GRAY15: c_int = 0x262626;
pub const MP_GREY15: c_int = 0x262626;
pub const MP_GRAY16: c_int = 0x292929;
pub const MP_GREY16: c_int = 0x292929;
pub const MP_GRAY17: c_int = 0x2b2b2b;
pub const MP_GREY17: c_int = 0x2b2b2b;
pub const MP_GRAY18: c_int = 0x2e2e2e;
pub const MP_GREY18: c_int = 0x2e2e2e;
pub const MP_GRAY19: c_int = 0x303030;
pub const MP_GREY19: c_int = 0x303030;
pub const MP_GRAY20: c_int = 0x333333;
pub const MP_GREY20: c_int = 0x333333;
pub const MP_GRAY21: c_int = 0x363636;
pub const MP_GREY21: c_int = 0x363636;
pub const MP_GRAY22: c_int = 0x383838;
pub const MP_GREY22: c_int = 0x383838;
pub const MP_GRAY23: c_int = 0x3b3b3b;
pub const MP_GREY23: c_int = 0x3b3b3b;
pub const MP_GRAY24: c_int = 0x3d3d3d;
pub const MP_GREY24: c_int = 0x3d3d3d;
pub const MP_GRAY25: c_int = 0x404040;
pub const MP_GREY25: c_int = 0x404040;
pub const MP_GRAY26: c_int = 0x424242;
pub const MP_GREY26: c_int = 0x424242;
pub const MP_GRAY27: c_int = 0x454545;
pub const MP_GREY27: c_int = 0x454545;
pub const MP_GRAY28: c_int = 0x474747;
pub const MP_GREY28: c_int = 0x474747;
pub const MP_GRAY29: c_int = 0x4a4a4a;
pub const MP_GREY29: c_int = 0x4a4a4a;
pub const MP_GRAY30: c_int = 0x4d4d4d;
pub const MP_GREY30: c_int = 0x4d4d4d;
pub const MP_GRAY31: c_int = 0x4f4f4f;
pub const MP_GREY31: c_int = 0x4f4f4f;
pub const MP_GRAY32: c_int = 0x525252;
pub const MP_GREY32: c_int = 0x525252;
pub const MP_GRAY33: c_int = 0x545454;
pub const MP_GREY33: c_int = 0x545454;
pub const MP_GRAY34: c_int = 0x575757;
pub const MP_GREY34: c_int = 0x575757;
pub const MP_GRAY35: c_int = 0x595959;
pub const MP_GREY35: c_int = 0x595959;
pub const MP_GRAY36: c_int = 0x5c5c5c;
pub const MP_GREY36: c_int = 0x5c5c5c;
pub const MP_GRAY37: c_int = 0x5e5e5e;
pub const MP_GREY37: c_int = 0x5e5e5e;
pub const MP_GRAY38: c_int = 0x616161;
pub const MP_GREY38: c_int = 0x616161;
pub const MP_GRAY39: c_int = 0x636363;
pub const MP_GREY39: c_int = 0x636363;
pub const MP_GRAY40: c_int = 0x666666;
pub const MP_GREY40: c_int = 0x666666;
pub const MP_GRAY41: c_int = 0x696969;
pub const MP_GREY41: c_int = 0x696969;
pub const MP_GRAY42: c_int = 0x6b6b6b;
pub const MP_GREY42: c_int = 0x6b6b6b;
pub const MP_GRAY43: c_int = 0x6e6e6e;
pub const MP_GREY43: c_int = 0x6e6e6e;
pub const MP_GRAY44: c_int = 0x707070;
pub const MP_GREY44: c_int = 0x707070;
pub const MP_GRAY45: c_int = 0x737373;
pub const MP_GREY45: c_int = 0x737373;
pub const MP_GRAY46: c_int = 0x757575;
pub const MP_GREY46: c_int = 0x757575;
pub const MP_GRAY47: c_int = 0x787878;
pub const MP_GREY47: c_int = 0x787878;
pub const MP_GRAY48: c_int = 0x7a7a7a;
pub const MP_GREY48: c_int = 0x7a7a7a;
pub const MP_GRAY49: c_int = 0x7d7d7d;
pub const MP_GREY49: c_int = 0x7d7d7d;
pub const MP_GRAY50: c_int = 0x7f7f7f;
pub const MP_GREY50: c_int = 0x7f7f7f;
pub const MP_GRAY51: c_int = 0x828282;
pub const MP_GREY51: c_int = 0x828282;
pub const MP_GRAY52: c_int = 0x858585;
pub const MP_GREY52: c_int = 0x858585;
pub const MP_GRAY53: c_int = 0x878787;
pub const MP_GREY53: c_int = 0x878787;
pub const MP_GRAY54: c_int = 0x8a8a8a;
pub const MP_GREY54: c_int = 0x8a8a8a;
pub const MP_GRAY55: c_int = 0x8c8c8c;
pub const MP_GREY55: c_int = 0x8c8c8c;
pub const MP_GRAY56: c_int = 0x8f8f8f;
pub const MP_GREY56: c_int = 0x8f8f8f;
pub const MP_GRAY57: c_int = 0x919191;
pub const MP_GREY57: c_int = 0x919191;
pub const MP_GRAY58: c_int = 0x949494;
pub const MP_GREY58: c_int = 0x949494;
pub const MP_GRAY59: c_int = 0x969696;
pub const MP_GREY59: c_int = 0x969696;
pub const MP_GRAY60: c_int = 0x999999;
pub const MP_GREY60: c_int = 0x999999;
pub const MP_GRAY61: c_int = 0x9c9c9c;
pub const MP_GREY61: c_int = 0x9c9c9c;
pub const MP_GRAY62: c_int = 0x9e9e9e;
pub const MP_GREY62: c_int = 0x9e9e9e;
pub const MP_GRAY63: c_int = 0xa1a1a1;
pub const MP_GREY63: c_int = 0xa1a1a1;
pub const MP_GRAY64: c_int = 0xa3a3a3;
pub const MP_GREY64: c_int = 0xa3a3a3;
pub const MP_GRAY65: c_int = 0xa6a6a6;
pub const MP_GREY65: c_int = 0xa6a6a6;
pub const MP_GRAY66: c_int = 0xa8a8a8;
pub const MP_GREY66: c_int = 0xa8a8a8;
pub const MP_GRAY67: c_int = 0xababab;
pub const MP_GREY67: c_int = 0xababab;
pub const MP_GRAY68: c_int = 0xadadad;
pub const MP_GREY68: c_int = 0xadadad;
pub const MP_GRAY69: c_int = 0xb0b0b0;
pub const MP_GREY69: c_int = 0xb0b0b0;
pub const MP_GRAY70: c_int = 0xb3b3b3;
pub const MP_GREY70: c_int = 0xb3b3b3;
pub const MP_GRAY71: c_int = 0xb5b5b5;
pub const MP_GREY71: c_int = 0xb5b5b5;
pub const MP_GRAY72: c_int = 0xb8b8b8;
pub const MP_GREY72: c_int = 0xb8b8b8;
pub const MP_GRAY73: c_int = 0xbababa;
pub const MP_GREY73: c_int = 0xbababa;
pub const MP_GRAY74: c_int = 0xbdbdbd;
pub const MP_GREY74: c_int = 0xbdbdbd;
pub const MP_GRAY75: c_int = 0xbfbfbf;
pub const MP_GREY75: c_int = 0xbfbfbf;
pub const MP_GRAY76: c_int = 0xc2c2c2;
pub const MP_GREY76: c_int = 0xc2c2c2;
pub const MP_GRAY77: c_int = 0xc4c4c4;
pub const MP_GREY77: c_int = 0xc4c4c4;
pub const MP_GRAY78: c_int = 0xc7c7c7;
pub const MP_GREY78: c_int = 0xc7c7c7;
pub const MP_GRAY79: c_int = 0xc9c9c9;
pub const MP_GREY79: c_int = 0xc9c9c9;
pub const MP_GRAY80: c_int = 0xcccccc;
pub const MP_GREY80: c_int = 0xcccccc;
pub const MP_GRAY81: c_int = 0xcfcfcf;
pub const MP_GREY81: c_int = 0xcfcfcf;
pub const MP_GRAY82: c_int = 0xd1d1d1;
pub const MP_GREY82: c_int = 0xd1d1d1;
pub const MP_GRAY83: c_int = 0xd4d4d4;
pub const MP_GREY83: c_int = 0xd4d4d4;
pub const MP_GRAY84: c_int = 0xd6d6d6;
pub const MP_GREY84: c_int = 0xd6d6d6;
pub const MP_GRAY85: c_int = 0xd9d9d9;
pub const MP_GREY85: c_int = 0xd9d9d9;
pub const MP_GRAY86: c_int = 0xdbdbdb;
pub const MP_GREY86: c_int = 0xdbdbdb;
pub const MP_GRAY87: c_int = 0xdedede;
pub const MP_GREY87: c_int = 0xdedede;
pub const MP_GRAY88: c_int = 0xe0e0e0;
pub const MP_GREY88: c_int = 0xe0e0e0;
pub const MP_GRAY89: c_int = 0xe3e3e3;
pub const MP_GREY89: c_int = 0xe3e3e3;
pub const MP_GRAY90: c_int = 0xe5e5e5;
pub const MP_GREY90: c_int = 0xe5e5e5;
pub const MP_GRAY91: c_int = 0xe8e8e8;
pub const MP_GREY91: c_int = 0xe8e8e8;
pub const MP_GRAY92: c_int = 0xebebeb;
pub const MP_GREY92: c_int = 0xebebeb;
pub const MP_GRAY93: c_int = 0xededed;
pub const MP_GREY93: c_int = 0xededed;
pub const MP_GRAY94: c_int = 0xf0f0f0;
pub const MP_GREY94: c_int = 0xf0f0f0;
pub const MP_GRAY95: c_int = 0xf2f2f2;
pub const MP_GREY95: c_int = 0xf2f2f2;
pub const MP_GRAY96: c_int = 0xf5f5f5;
pub const MP_GREY96: c_int = 0xf5f5f5;
pub const MP_GRAY97: c_int = 0xf7f7f7;
pub const MP_GREY97: c_int = 0xf7f7f7;
pub const MP_GRAY98: c_int = 0xfafafa;
pub const MP_GREY98: c_int = 0xfafafa;
pub const MP_GRAY99: c_int = 0xfcfcfc;
pub const MP_GREY99: c_int = 0xfcfcfc;
pub const MP_GRAY100: c_int = 0xffffff;
pub const MP_GREY100: c_int = 0xffffff;
pub const MP_DARKGREY: c_int = 0xa9a9a9;
pub const MP_DARKGRAY: c_int = 0xa9a9a9;
pub const MP_DARKBLUE: c_int = 0x00008b;
pub const MP_DARKCYAN: c_int = 0x008b8b;
pub const MP_DARKMAGENTA: c_int = 0x8b008b;
pub const MP_DARKRED: c_int = 0x8b0000;
pub const MP_LIGHTGREEN: c_int = 0x90ee90;
